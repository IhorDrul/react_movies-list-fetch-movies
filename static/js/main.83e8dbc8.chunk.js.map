{"version":3,"sources":["components/MovieCard/MovieCard.js","components/MoviesList/MoviesList.js","components/FindMovie/FindMovie.js","api/api.js","App.js","customHooks/useLocaleStorage.jsx","index.js"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","defaultProps","MoviesList","movies","map","movie","key","imdbId","FindMovie","findMovie","addMovie","useState","searchValue","setSearchValue","newMovie","setNewMovie","appliedQuery","setAppliedQuery","undefined","errorMessage","setErrorMessage","applyQuery","useCallback","func","delay","timer","clearTimeout","args","setTimeout","debounce","findSearchMovie","a","searchMovie","onSubmit","event","preventDefault","some","autoComplete","htmlFor","type","id","placeholder","classNames","value","onChange","target","onClick","localStorage","clear","window","location","reload","getMovie","film","url","fetch","then","response","json","App","initialValue","JSON","parse","getItem","storedValue","setValue","setItem","stringify","useLocaleStorage","data","setMovies","Title","Plot","Poster","ImdbUrl","imdbID","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.83e8dbc8.chunk.js","sourcesContent":["import React from 'react';\nimport './MovieCard.scss';\nimport PropTypes from 'prop-types';\n\nexport const MovieCard = ({\n  title,\n  description = '',\n  imgUrl,\n  imdbUrl,\n}) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n\nMovieCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n  imgUrl: PropTypes.string.isRequired,\n  imdbUrl: PropTypes.string,\n};\n\nMovieCard.defaultProps = {\n  imdbUrl: '',\n};\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport PropTypes from 'prop-types';\nimport { MovieCard } from '../MovieCard';\n\nexport const MoviesList = ({\n  movies = [],\n}) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      imdbId: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n};\n","import React, { useCallback, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport './FindMovie.scss';\n\nimport { MovieCard } from '../MovieCard';\n\nconst debounce = (func, delay) => {\n  let timer;\n\n  return (...args) => {\n    clearTimeout(timer);\n    timer = setTimeout(func, delay, ...args);\n  };\n};\n\nexport const FindMovie = ({ findMovie, addMovie, movies }) => {\n  const [searchValue, setSearchValue] = useState('');\n  const [newMovie, setNewMovie] = useState({});\n  const [appliedQuery, setAppliedQuery] = useState('');\n  const [errorMessage, setErrorMessage] = useState(undefined);\n\n  const applyQuery = useCallback(\n    debounce(setAppliedQuery, 700),\n    [],\n  );\n\n  const findSearchMovie = async() => {\n    const searchMovie = await findMovie(appliedQuery);\n\n    if (!searchMovie.imdbId) {\n      setErrorMessage('Can\\'t find a movie with such a title');\n\n      return;\n    }\n\n    setErrorMessage('');\n    setNewMovie(searchMovie);\n  };\n\n  const addWithoutDuplicates = (event) => {\n    event.preventDefault();\n    const duplicate = movies.some(movie => movie.imdbId === newMovie.imdbId);\n\n    if (duplicate) {\n      setErrorMessage('Can\\'t add duplicated movie');\n\n      return;\n    }\n\n    setErrorMessage('');\n\n    addMovie(newMovie);\n    setSearchValue('');\n    setAppliedQuery('');\n    setNewMovie({});\n  };\n\n  return (\n    <>\n      <form\n        onSubmit={addWithoutDuplicates}\n        className=\"find-movie\"\n        autoComplete=\"off\"\n      >\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className={classNames('input', { 'is-danger': errorMessage })}\n              value={searchValue}\n              onChange={(event) => {\n                setSearchValue(event.target.value);\n                applyQuery(event.target.value);\n              }}\n            />\n          </div>\n\n          { errorMessage && (\n            <p className=\"help is-danger\">\n              {errorMessage}\n            </p>\n          )\n          }\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              onClick={findSearchMovie}\n              type=\"button\"\n              className=\"button is-light\"\n            >\n              Find a movie\n            </button>\n          </div>\n\n          <div className=\"control\">\n            <button\n              type=\"submit\"\n              className=\"button is-primary\"\n            >\n              Add to the list\n            </button>\n            <button\n              type=\"button\"\n              className=\"button is-light\"\n              onClick={() => {\n                localStorage.clear();\n                window.location.reload();\n              }}\n            >\n              Clear storage\n            </button>\n          </div>\n        </div>\n      </form>\n\n      <div className=\"container\">\n        {newMovie.imdbId && (\n          <>\n            <h2 className=\"title\">Preview</h2>\n            <MovieCard {...newMovie} />\n          </>\n        )}\n      </div>\n    </>\n  );\n};\n\nconst movieType = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n  imgUrl: PropTypes.string.isRequired,\n  imdbUrl: PropTypes.string,\n};\n\nFindMovie.propTypes = {\n  findMovie: PropTypes.func.isRequired,\n  addMovie: PropTypes.func.isRequired,\n  movies: PropTypes.arrayOf(\n    PropTypes.shape(movieType).isRequired,\n  ).isRequired,\n};\n","const BASE_URL = 'https://www.omdbapi.com/?apikey=882a3426&t=';\n\nconst request = url => (\n  fetch(`${BASE_URL}${url}`)\n    .then(response => response.json())\n);\n\nexport const getMovie = film => request(film);\n","import React, { useCallback } from 'react';\nimport { useLocaleStorage } from './customHooks/useLocaleStorage';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport data from './api/movies.json';\nimport { getMovie } from './api/api';\n\nexport const App = () => {\n  // const [movies, setMovies] = useState([...data]);\n  const [movies, setMovies] = useLocaleStorage('value', [...data]);\n\n  const findMovie = useCallback(async(url) => {\n    const movie = await getMovie(url);\n\n    return {\n      title: movie.Title,\n      description: movie.Plot,\n      imgUrl: movie.Poster,\n      imdbUrl: movie.ImdbUrl,\n      imdbId: movie.imdbID,\n    };\n  }, []);\n\n  const addMovie = (newMovie) => {\n    setMovies([...movies, newMovie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <FindMovie\n          findMovie={findMovie}\n          addMovie={addMovie}\n          movies={movies}\n        />\n      </div>\n    </div>\n  );\n};\n","import { useState } from 'react';\n\nexport const useLocaleStorage = (key, initialValue) => {\n  const [storedValue, setValue] = useState(() => {\n    try {\n      return JSON.parse(localStorage.getItem(key)) || initialValue;\n    } catch {\n      return initialValue;\n    }\n  });\n\n  const save = (value) => {\n    setValue(value);\n    localStorage.setItem(key, JSON.stringify(value));\n  };\n\n  return [storedValue, save];\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}